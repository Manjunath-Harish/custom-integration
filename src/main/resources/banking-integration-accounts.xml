<routes xmlns="http://camel.apache.org/schema/spring">
    <route id="rb_integration_getAccountBalance">
        <!--This route XML was autogenerated generated by Integration Editor Tool on  Tue, 26 Mar 2019 8:22 AM-->
        <!--Manual changes to this may cause incorrect behaviour and will loose the changes when route updated through the editor tool.-->
        <from uri="direct:rb_integration_getAccountBalance"/>
        <setProperty propertyName="responseClass">
            <constant>com.morfeus.rb_integration_getAccountBalance.model.AccountBalanceResponse
            </constant>
        </setProperty>
        <setHeader headerName="CamelHttpMethod">
            <constant>get
            </constant>
        </setHeader>
        <setHeader headerName="Content-Type">
            <constant>application/json
            </constant>
        </setHeader>
        <setHeader headerName="accept">
            <constant>application/json
            </constant>
        </setHeader>
        <doTry>
            <setProperty propertyName="apiRequestObject">
                <simple>${body}
                </simple>
            </setProperty>
            <bean method="marshallToRestRequest(${body},${header.Content-Type})" ref="unmarshallBean"/>
            <log logName="com.morfeus.banking" loggingLevel="INFO" message="After request marshalling ${body}"/>
            <to uri="http4://84a81549.ngrok.io/bankingIntegration/v1/1/accounts/2/balance"/>
            <convertBodyTo type="java.lang.String"/>
            <setProperty propertyName="apiResponseObject">
                <simple>${body}
                </simple>
            </setProperty>
            <transform>
                <groovy>import com.morfeus.rb_integration_getAccountBalance.model.AccountBalanceResponse
                    import com.morfeus.banking.retail.domain.accountinquiry.AccountInquiryResponse;
                    import com.morfeus.banking.retail.domain.accountinquiry.SavingsAccount;
                    import com.morfeus.banking.retail.domain.common.Amount;
                    import groovy.json.JsonOutput;
                    import java.util.List;
                    AccountBalanceResponse accountBalanceResponse = (AccountBalanceResponse)request.body;
                    AccountInquiryResponse accountInquiryResponse = new AccountInquiryResponse();
                    List cmmResponses = new ArrayList();
                    if(accountBalanceResponse !=null) {
                    SavingsAccount savingsAccount = new SavingsAccount();
                    Amount amount = new Amount();
                    amount.setAmount(BigDecimal.valueOf(accountBalanceResponse.getAccountBalance().getAmount()));
                    amount.setCurrency(account.getBalance().getCurrencyCode());
                    savingsAccount.setBalance(amount);
                    amount = new Amount();
                    amount.setAmount(BigDecimal.valueOf(accountBalanceResponse.getAccountBalance().getCurrentBalance()));
                    amount.setCurrency(account.getBalance().getCurrencyCode());
                    savingsAccount.setCurrentBalance(amount);
                    amount = new Amount();
                    amount.setAmount(BigDecimal.valueOf(accountBalanceResponse.getAccountBalance().getAvailableBalance()));
                    amount.setCurrency(account.getBalance().getCurrencyCode());
                    savingsAccount.setAvailableBalance(amount);
                    cmmResponses.add(savingsAccount);
                    }
                    accountInquiryResponse.setAccounts(cmmResponses);
                    def json = JsonOutput.toJson(accountInquiryResponse);
                    println(json);
                    return accountInquiryResponse;
                </groovy>
            </transform>
            <log logName="com.morfeus.banking" loggingLevel="INFO" message="Response ${body}"/>
            <doCatch>
                <exception>java.lang.Throwable
                </exception>
                <log logName="com.morfeus.banking" loggingLevel="ERROR" message="Exception occured ${exception}"/>
                <bean method="constructRestExceptionMessage(${exception},${property.objectMapper},${property.responseMapperId},${header.accept},${routeId})" ref="unmarshallBean"/>
            </doCatch>
        </doTry>
    </route>
    <route id="rb_integration_getAccountDetails">
        <!--This route XML was autogenerated generated by Integration Editor Tool on  Tue, 26 Mar 2019 9:27 AM-->
        <!--Manual changes to this may cause incorrect behaviour and will loose the changes when route updated through the editor tool.-->
        <from uri="direct:rb_integration_getAccountDetails"/>
        <setProperty propertyName="responseClass">
            <constant>com.morfeus.rb_integration_getAccountDetails.model.AccountDetailResponse
            </constant>
        </setProperty>
        <setHeader headerName="CamelHttpMethod">
            <constant>get
            </constant>
        </setHeader>
        <setHeader headerName="Content-Type">
            <constant>application/json
            </constant>
        </setHeader>
        <setHeader headerName="accept">
            <constant>application/json
            </constant>
        </setHeader>
        <doTry>
            <setProperty propertyName="apiRequestObject">
                <simple>${body}
                </simple>
            </setProperty>
            <bean method="marshallToRestRequest(${body},${header.Content-Type})" ref="unmarshallBean"/>
            <log logName="com.morfeus.banking" loggingLevel="INFO" message="After request marshalling ${body}"/>
            <to uri="http4://84a81549.ngrok.io/bankingIntegration/v1/1/accounts/2"/>
            <convertBodyTo type="java.lang.String"/>
            <setProperty propertyName="apiResponseObject">
                <simple>${body}
                </simple>
            </setProperty>
            <transform>
                <groovy>import com.morfeus.rb_integration_getAccountDetails.model.AccountDetailResponse;
                    import com.morfeus.banking.retail.constants.AccountCategoryEnum;
                    import com.morfeus.banking.retail.constants.AccountStatusEnum;
                    import com.morfeus.banking.retail.domain.accountinquiry.AccountInquiryResponse;
                    import com.morfeus.banking.retail.domain.accountinquiry.SavingsAccount;
                    import com.morfeus.banking.retail.domain.common.Amount;
                    import groovy.json.JsonOutput;
                    import java.util.List;
                    AccountDetailResponse accountDetailResponse = (AccountDetailResponse)request.body;
                    AccountInquiryResponse accountInquiryResponse = new AccountInquiryResponse();
                    List cmmResponses = new ArrayList();
                    if(accountDetailResponse !=null) {
                    SavingsAccount savingsAccount = new SavingsAccount();
                    savingsAccount.setAccountId(accountDetailResponse.getAccountDetail().getAccountId());
                    savingsAccount.setDisplayAccountNumber(accountDetailResponse.getAccountDetail().getDisplayAccountNumber());
                    savingsAccount.setAccountNumber(accountDetailResponse.getAccountDetail().getAccountNumber());
                    savingsAccount.setAccountCategory(AccountCategoryEnum.ACCOUNT);
                    savingsAccount.setAccountStatus(AccountStatusEnum.ACTIVE);
                    Amount amount = new Amount();
                    amount.setAmount(BigDecimal.valueOf(accountDetailResponse.getAccountDetail().getBalance().getAmount()));
                    amount.setCurrency(account.getBalance().getCurrencyCode());
                    savingsAccount.setBalance(amount);
                    amount = new Amount();
                    amount.setAmount(BigDecimal.valueOf(accountDetailResponse.getAccountDetail().getBalance().getCurrentBalance()));
                    amount.setCurrency(account.getBalance().getCurrencyCode());
                    savingsAccount.setCurrentBalance(amount);
                    amount = new Amount();
                    amount.setAmount(BigDecimal.valueOf(accountDetailResponse.getAccountDetail().getBalance().getAvailableBalance()));
                    amount.setCurrency(account.getBalance().getCurrencyCode());
                    savingsAccount.setAvailableBalance(amount);
                    cmmResponses.add(savingsAccount);
                    }
                    accountInquiryResponse.setAccounts(cmmResponses);
                    def json = JsonOutput.toJson(accountInquiryResponse);
                    println(json);
                    return accountInquiryResponse;
                </groovy>
            </transform>
            <log logName="com.morfeus.banking" loggingLevel="INFO" message="Response ${body}"/>
            <doCatch>
                <exception>java.lang.Throwable
                </exception>
                <log logName="com.morfeus.banking" loggingLevel="ERROR" message="Exception occured ${exception}"/>
                <bean method="constructRestExceptionMessage(${exception},${property.objectMapper},${property.responseMapperId},${header.accept},${routeId})" ref="unmarshallBean"/>
            </doCatch>
        </doTry>
    </route>
    <route id="rb_integration_getAccounts">
        <!--This route XML was autogenerated generated by Integration Editor Tool on  Wed, 27 Mar 2019 11:19 AM-->
        <!--Manual changes to this may cause incorrect behaviour and will loose the changes when route updated through the editor tool.-->
        <from uri="direct:rb_integration_getAccounts"/>
        <setProperty propertyName="responseClass">
            <constant>com.morfeus.rb_integration_getAccounts.model.AccountsResponse
            </constant>
        </setProperty>
        <setHeader headerName="CamelHttpMethod">
            <constant>get
            </constant>
        </setHeader>
        <setHeader headerName="Content-Type">
            <constant>application/json
            </constant>
        </setHeader>
        <setHeader headerName="accept">
            <constant>application/json
            </constant>
        </setHeader>
        <doTry>
            <setProperty propertyName="apiRequestObject">
                <simple>${body}
                </simple>
            </setProperty>
            <bean method="marshallToRestRequest(${body},${header.Content-Type})" ref="unmarshallBean"/>
            <log logName="com.morfeus.banking" loggingLevel="INFO" message="After request marshalling ${body}"/>
            <to uri="http4://84a81549.ngrok.io/bankingIntegration/v1/1/accounts"/>
            <convertBodyTo type="java.lang.String"/>
            <setProperty propertyName="apiResponseObject">
                <simple>${body}
                </simple>
            </setProperty>
            <transform>
                <groovy>import com.morfeus.rb_integration_getAccounts.model.AccountsResponse;
                    import com.morfeus.rb_integration_getAccounts.model.Account;
                    import com.morfeus.banking.retail.constants.AccountCategoryEnum;
                    import com.morfeus.banking.retail.constants.AccountStatusEnum;
                    import com.morfeus.banking.retail.domain.accountinquiry.AccountInquiryResponse;
                    import com.morfeus.banking.retail.domain.accountinquiry.SavingsAccount;
                    import com.morfeus.banking.retail.domain.common.Amount;
                    import groovy.json.JsonOutput;
                    import java.util.List;
                    AccountsResponse accountsResponse = (AccountsResponse)request.body;
                    AccountInquiryResponse accountInquiryResponse = new AccountInquiryResponse();
                    List cmmResponses = new ArrayList();
                    if(accountsResponse !=null) {
                    List&lt;Account&gt; accounts = accountsResponse.getAccounts();
                    for(int i=0;i&lt;accounts.size();i++) {
                    Account account=accounts.get(i);
                    SavingsAccount savingsAccount = new SavingsAccount();
                    savingsAccount.setAccountId(account.getAccountId());
                    savingsAccount.setDisplayAccountNumber(account.getDisplayAccountNumber());
                    savingsAccount.setAccountNumber(account.getAccountNumber());
                    savingsAccount.setAccountCategory(AccountCategoryEnum.ACCOUNT);
                    savingsAccount.setAccountStatus(AccountStatusEnum.ACTIVE);
                    Amount amount = new Amount();
                    amount.setAmount(BigDecimal.valueOf(account.getBalance().getAmount()));
                    amount.setCurrency(account.getBalance().getCurrencyCode());
                    savingsAccount.setBalance(amount);
                    amount = new Amount();
                    amount.setAmount(BigDecimal.valueOf(account.getBalance().getCurrentBalance()));
                    amount.setCurrency(account.getBalance().getCurrencyCode());
                    savingsAccount.setCurrentBalance(amount);
                    amount = new Amount();
                    amount.setAmount(BigDecimal.valueOf(account.getBalance().getAvailableBalance()));
                    amount.setCurrency(account.getBalance().getCurrencyCode());
                    savingsAccount.setAvailableBalance(amount);
                    cmmResponses.add(savingsAccount);
                    }
                    accountInquiryResponse.setAccounts(cmmResponses);
                    }
                    def json = JsonOutput.toJson(accountInquiryResponse);
                    println(json);
                    return accountInquiryResponse;
                </groovy>
            </transform>
            <log logName="com.morfeus.banking" loggingLevel="INFO" message="Response ${body}"/>
            <doCatch>
                <exception>java.lang.Throwable
                </exception>
                <log logName="com.morfeus.banking" loggingLevel="ERROR" message="Exception occured ${exception}"/>
                <bean method="constructRestExceptionMessage(${exception},${property.objectMapper},${property.responseMapperId},${header.accept},${routeId})" ref="unmarshallBean"/>
            </doCatch>
        </doTry>
    </route>
</routes>